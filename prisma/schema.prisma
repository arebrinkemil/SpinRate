// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// This is the main User model for authentication and user data
model User {
  id              String    @id @default(cuid()) @map("_id")
  email           String    @unique
  username        String    @unique
  firstName       String?
  lastName        String?
  description     String?
  profileImageUrl String?
  emailVerified   DateTime?
  password        Password?
  ratings         Rating[]
  reviews         Review[]
  comments        Comment[]
  favorites       Favorite[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Password {
  id     String @id @default(cuid()) @map("_id")
  hash   String
  salt   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Artist {
  id          String      @id @default(cuid()) @map("_id")
  name        String
  imageUrl    String?
  spotifyId   String?     @unique
  spotifyUrl  String?
  albums      Album[]
  songs       Song[]
  ratings     Rating[]
  reviews     Review[]
  favorites   Favorite[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Album {
  id          String      @id @default(cuid()) @map("_id")
  name        String
  artistId    String
  releaseDate DateTime
  type        AlbumType   @default(ALBUM)
  spotifyId   String?     @unique
  spotifyUrl  String?
  imageUrl    String?
  artist      Artist      @relation(fields: [artistId], references: [id])
  songs       Song[]
  ratings     Rating[]
  reviews     Review[]
  favorites   Favorite[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Song {
  id          String      @id @default(cuid()) @map("_id")
  name        String
  artistId    String
  artistName  String?
  albumId     String?
  duration    Int
  releaseDate DateTime
  spotifyId   String?     @unique
  spotifyUrl  String?
  imageUrl    String?
  artist      Artist      @relation(fields: [artistId], references: [id])
  album       Album?      @relation(fields: [albumId], references: [id])
  ratings     Rating[]
  reviews     Review[]
  favorites   Favorite[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Rating {
  id          String   @id @default(cuid()) @map("_id")
  userId      String?
  ratingValue Int
  verified    Boolean  @default(false)
  songId      String?
  albumId     String?
  artistId    String?
  user        User?    @relation(fields: [userId], references: [id])
  artist      Artist?  @relation(fields: [artistId], references: [id])
  album       Album?   @relation(fields: [albumId], references: [id])
  song        Song?    @relation(fields: [songId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, songId])
  @@unique([userId, albumId])
  @@unique([userId, artistId])
}

model Review {
  id        String    @id @default(cuid()) @map("_id")
  userId    String
  content   String
  songId    String?
  albumId   String?
  artistId  String?
  user      User      @relation(fields: [userId], references: [id])
  artist    Artist?   @relation(fields: [artistId], references: [id])
  album     Album?    @relation(fields: [albumId], references: [id])
  song      Song?     @relation(fields: [songId], references: [id])
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, songId])
  @@unique([userId, albumId])
  @@unique([userId, artistId])
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  reviewId  String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  type      String
  songId    String?
  albumId   String?
  artistId  String?
  user      User     @relation(fields: [userId], references: [id])
  song      Song?    @relation(fields: [songId], references: [id])
  album     Album?   @relation(fields: [albumId], references: [id])
  artist    Artist?  @relation(fields: [artistId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, songId])
  @@unique([userId, albumId])
  @@unique([userId, artistId])
}

enum AlbumType {
  ALBUM
  SINGLE
  COMPILATION
  EP
}