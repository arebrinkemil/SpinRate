// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String    @id @default(cuid())
  userId        String
  type          String
  provider      String
  providerAccountId String
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  reviews       Review[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id          String   @id @default(cuid())
  name        String
  imageUrl    String
  spotifyId   String   @unique
  spotifyUrl  String
  albums      Album[]
  songs       Song[]
  ratings     Rating[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Album {
  id          String   @id @default(cuid())
  name        String
  artistId    String
  releaseDate String
  albumType   String
  spotifyId   String   @unique
  spotifyUrl  String
  imageUrl    String
  artist      Artist   @relation(fields: [artistId], references: [id])
  songs       Song[]
  ratings     Rating[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Song {
  id          String   @id @default(cuid())
  name        String
  artistId    String
  albumId     String
  durationMs  Int
  releaseDate String
  spotifyId   String   @unique
  spotifyUrl  String
  imageUrl    String
  artist      Artist   @relation(fields: [artistId], references: [id])
  album       Album    @relation(fields: [albumId], references: [id])
  ratings     Rating[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rating {
  id          String   @id @default(cuid())
  userId      String
  ratingValue Int
  targetId    String
  targetType  String
  user        User     @relation(fields: [userId], references: [id])
  artist      Artist?  @relation(fields: [targetId], references: [id])
  album       Album?   @relation(fields: [targetId], references: [id])
  song        Song?    @relation(fields: [targetId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, targetId, targetType])
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  content     String
  targetId    String
  targetType  String
  user        User      @relation(fields: [userId], references: [id])
  artist      Artist?   @relation(fields: [targetId], references: [id])
  album       Album?    @relation(fields: [targetId], references: [id])
  song        Song?     @relation(fields: [targetId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, targetId, targetType])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  content   String
  user      User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
