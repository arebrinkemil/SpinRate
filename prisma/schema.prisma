generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}
model Account {
  id       String   @id @default(uuid())
  email    String   @unique
  username String
  firstName String?
  lastName String?
  description String?
  profileImageUrl String?
  experincePoints   Int?      @default(0)
  favorites Favorite[]
  ratings  Rating[]
  reviews  Review[]
  Password Password?
  comments Comment[]
}

model Password {
  id        String   @id @default(uuid())
  salt      String
  hash      String
  Account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @unique
}

model Favorite {
  id       String    @id @default(uuid())
  type     String? 
  user     Account   @relation(fields: [userId], references: [id])
  userId   String
  album    Album?    @relation(fields: [albumId], references: [id])
  albumId  String?
  song     Song?     @relation(fields: [songId], references: [id])
  songId   String?
  artist   Artist?   @relation(fields: [artistId], references: [id])
  artistId String?
}

model Artist {
  id             String     @id @default(uuid())
  name           String
  albums         Album[]
  songs          Song[]
  ratings        Rating[]     
  reviews        Review[]
  favorites      Favorite[]
  imageUrl       String?
  mediaType      String     @default("artist") 
}


model Album {
  id             String     @id @default(uuid())
  name           String
  releaseDate    DateTime
  type           AlbumType
  artist         Artist     @relation(fields: [artistId], references: [id])
  artistId       String
  songs          Song[]
  ratings        Rating[]
  reviews        Review[]
  favorites      Favorite[]
  spotifyUrl     String     @unique
  imageUrl       String?
  mediaType      String     @default("album") 
}
model Song {
  id             String     @id @default(uuid())
  name           String
  duration       Int        
  releaseDate    DateTime   
  album          Album?     @relation(fields: [albumId], references: [id])
  albumId        String?
  artistName     String?
  artist         Artist     @relation(fields: [artistId], references: [id])
  artistId       String
  isSingle       Boolean    @default(false) 
  ratings        Rating[]
  reviews        Review[]
  favorites      Favorite[]
  spotifyUrl     String     @unique
  imageUrl       String?
  mediaType      String     @default("song") 
} 

model Rating {
  id           String   @id @default(uuid())
  verified     Boolean  @default(false)
  ratingValue  Int      @default(0) // 1-10 scale
  user         Account?  @relation(fields: [userId], references: [id])
  userId       String?
  album        Album?   @relation(fields: [albumId], references: [id])
  albumId      String?
  song         Song?    @relation(fields: [songId], references: [id])
  songId       String?
  artist       Artist?  @relation(fields: [artistId], references: [id]) 
  artistId     String?
}
model Review {
  id           String   @id @default(uuid())
  content      String   @db.Text
  user         Account  @relation(fields: [userId], references: [id])
  userId       String
  album        Album?   @relation(fields: [albumId], references: [id])
  albumId      String?
  song         Song?    @relation(fields: [songId], references: [id])
  songId       String?
  artist       Artist?  @relation(fields: [artistId], references: [id])
  artistId     String?
  comments     Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  user      Account  @relation(fields: [userId], references: [id])
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String
}


enum AlbumType {
  ALBUM
  EP
  COMPILATION
  album
  ep
  compilation
}
